package br.com.kirgh.app.pks;

import br.com.kirgh.app.entities.Address;
import br.com.kirgh.app.entities.User;
import jakarta.persistence.Embeddable;
import jakarta.persistence.ForeignKey;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.io.Serializable;
import java.util.Objects;

/**
 * The {@code AddressRelationPK} class is a Java implementation of a composite primary key for a database table, with a custom
 * {@code equals()} and {@code hashCode()} method.
 */
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Embeddable
@SuppressWarnings("JpaDataSourceORMInspection")
public class AddressRelationPK implements Serializable {
    /**
     * This code is defining a many-to-one relationship between the {@code AddressRelationPK} entity and the
     * {@code User} entity.
     */
    @ManyToOne
    @JoinColumn(name = "parent_id", nullable = false, foreignKey = @ForeignKey(name = "address_relations_parent_id_users_id_fk"))
    private User parent;

    /**
     * This code is defining a many-to-one relationship between the {@code AddressRelationPK} entity and the
     * {@code Address} entity.
     */
    @ManyToOne
    @JoinColumn(name = "address_id", nullable = false, foreignKey = @ForeignKey(name = "address_relations_address_id_addresses_id_fk"))
    private Address address;

    /**
     * This is an implementation of the {@code equals} method in Java that checks if two {@code AddressRelationPK} objects are equal based
     * on their parent and address fields.
     *
     * @param o The parameter {@code o} is an object of type {@code Object}, which is the superclass of all other classes in Java. In
     *          this case, it is used to compare the equality of two {@code AddressRelationPK} objects.
     * @return A boolean value indicating whether the current object is equal to the object passed as an argument.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        AddressRelationPK that = (AddressRelationPK) o;
        return parent.equals(that.parent) && address.equals(that.address);
    }

    /**
     * The function returns a hash code based on the values of the {@code parent} and {@code address} variables.
     *
     * @return The {@code hashCode()} method is returning an integer value that is generated by calling the {@code hash()} method of
     * the {@code Objects} class and passing in the {@code parent} and {@code address} variables as arguments. This integer value is used to
     * represent the object in hash-based data structures such as {@code HashMap} and {@code HashSet}.
     */
    @Override
    public int hashCode() {
        return Objects.hash(parent, address);
    }
}
