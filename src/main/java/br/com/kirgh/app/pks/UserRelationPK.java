package br.com.kirgh.app.pks;

import br.com.kirgh.app.entities.User;
import jakarta.persistence.Embeddable;
import jakarta.persistence.ForeignKey;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.io.Serializable;
import java.util.Objects;

/**
 * The UserRelationPK class in Java defines a primary key for a user relation and overrides the equals and hashCode methods
 * to compare objects based on their owner and child attributes.
 */
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Embeddable
@SuppressWarnings("JpaDataSourceORMInspection")
public class UserRelationPK implements Serializable {
    /**
     * This code is defining a many-to-one relationship between the {@code UserRelationPK} entity and the
     * {@code User} entity.
     */
    @ManyToOne
    @JoinColumn(name = "owner_id", nullable = false, foreignKey = @ForeignKey(name = "user_relations_owner_id_users_id_fk"))
    private User owner;

    /**
     * This code is defining a many-to-one relationship between the {@code UserRelationPK} entity and the
     * {@code User} entity.
     */
    @ManyToOne
    @JoinColumn(name = "child_id", nullable = false, foreignKey = @ForeignKey(name = "user_relations_child_id_users_id_fk"))
    private User child;

    /**
     * This is an implementation of the equals method for a UserRelationPK class in Java, which checks if two objects are
     * equal based on their owner and child attributes.
     *
     * @param o The parameter "o" is an object of type Object, which is the superclass of all other classes in Java. In
     *          this case, it is used to compare the equality of two UserRelationPK objects.
     * @return A boolean value indicating whether the current object is equal to the specified object.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        UserRelationPK that = (UserRelationPK) o;
        return owner.equals(that.owner) && child.equals(that.child);
    }

    /**
     * The above function overrides the default hashCode() method to generate a hash code based on the owner and child
     * objects.
     *
     * @return The {@code hashCode()} method is returning an integer value that is generated by calling the {@code hash()} method of
     * the {@code Objects} class and passing in the {@code owner} and {@code child} variables as arguments. This integer value is used to
     * represent the object in hash-based data structures such as {@code HashMap} and {@code HashSet}.
     */
    @Override
    public int hashCode() {
        return Objects.hash(owner, child);
    }
}
